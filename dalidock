#!/usr/bin/python3 -u
# -*- coding: utf-8 -*-

__author__ = "Lionel Nicolas"
__copyright__ = "Copyright 2016-2019 Lionel Nicolas"
__license__ = "Apache License Version 2.0"

import json
import os
import sys
import signal
import socket
import subprocess
import time
import threading
import xml.etree.ElementTree
import libvirt
import docker

# docker default values
DOCKER_SOCKET = os.getenv("DOCKER_SOCKET", "unix://var/run/docker.sock")

# libvirt default values
LIBVIRT_SOCKET = os.getenv("LIBVIRT_SOCKET", "/var/run/libvirt/libvirt-sock")
LIBVIRT_IP_TIMEOUT = float(os.getenv("LIBVIRT_IP_TIMEOUT", "30.0"))

# DNS default values
DNS_DOMAIN = os.getenv("DNS_DOMAIN", "local")
DNS_WILDCARD = os.getenv("DNS_WILDCARD", "false")

# Loadbalancer default values
LB_DOMAIN = os.getenv("LB_DOMAIN", "local")

# HAproxy default values
HAPROXY_CONFIG_TEMPLATE = os.getenv("HAPROXY_CONFIG_TEMPLATE", "/etc/haproxy/haproxy.cfg")
HAPROXY_CONFIG_FILE = os.getenv("HAPROXY_CONFIG_FILE", "/run/haproxy/haproxy.cfg")

# dnsmasq default values
DNSMASQ_WILDCARDS_FILE = os.getenv("DNSMASQ_WILDCARDS_FILE", "/run/dnsmasq/conf/docker")
DNSMASQ_HOSTS_FILE = os.getenv("DNSMASQ_HOSTS_FILE", "/run/dnsmasq/hosts/docker")


def get_own_ip_address(from_env=False):
    forced_external_ip = os.getenv("EXTERNAL_IP")

    if forced_external_ip is not None and from_env:
        return forced_external_ip

    # get default network interface
    iface = subprocess.check_output(
        "awk '{ if ($2 == \"00000000\") { print $1; exit; } }' /proc/net/route", shell=True
    )

    if not iface:
        raise Exception("Fail to get default network interface")

    # get IP address of default network interface
    iface = iface.decode("utf8").split("\n")[0]
    ipaddr = subprocess.check_output(
        "ip addr show dev %s | awk -F'[ \t/]+' '/inet / { print $3; exit; }'" % (iface), shell=True
    )

    if not ipaddr:
        raise Exception("Fail to get interface %s IP address" % (iface))

    return ipaddr.decode("utf8").split("\n")[0]


def get_process_info():
    return "%s[%d]" % (os.path.basename(sys.argv[0]), os.getpid())


def log(msg, level="INFO", hostname=False):
    if hostname:
        print("%s: %-7s %-28s %s" % (get_process_info(), "[%s]" % level, "[%s]" % hostname, msg))
    else:
        print("%s: %-7s %s" % (get_process_info(), "[%s]" % level, msg))


def error(msg, hostname=False):
    log(msg, level="ERROR", hostname=hostname)


def fatal(msg, hostname=False):
    log(msg, "FATAL", hostname=hostname)
    sys.exit(1)


def sighandler(_sig, _frame):
    print("")
    sys.exit(0)


# https://github.com/libvirt/libvirt-python/blob/master/examples/event-test.py#L494
class Description:
    __slots__ = ("desc", "args")

    def __init__(self, *args, **kwargs):
        self.desc = kwargs.get("desc")
        self.args = args

    def __str__(self):  # type: () -> str
        return self.desc

    def __getitem__(self, item):  # type: (int) -> str
        try:
            data = self.args[item]
        except IndexError:
            return self.__class__(desc=str(item))

        if isinstance(data, str):
            return self.__class__(desc=data)

        if isinstance(data, (list, tuple)):
            desc, args = data
            return self.__class__(*args, desc=desc)

        raise TypeError(args)


DOM_EVENTS = Description(
    ("Defined", ("Added", "Updated", "Renamed", "Snapshot")),
    ("Undefined", ("Removed", "Renamed")),
    ("Started", ("Booted", "Migrated", "Restored", "Snapshot", "Wakeup")),
    (
        "Suspended",
        (
            "Paused",
            "Migrated",
            "IOError",
            "Watchdog",
            "Restored",
            "Snapshot",
            "API error",
            "Postcopy",
            "Postcopy failed",
        ),
    ),
    ("Resumed", ("Unpaused", "Migrated", "Snapshot", "Postcopy")),
    (
        "Stopped",
        ("Shutdown", "Destroyed", "Crashed", "Migrated", "Saved", "Failed", "Snapshot", "Daemon"),
    ),
    ("Shutdown", ("Finished", "On guest request", "On host request")),
    ("PMSuspended", ("Memory", "Disk")),
    ("Crashed", ("Panicked",)),
)


class LibvirtQemuClient:
    def __init__(self, socket_path="/var/run/libvirt/libvirt-sock"):
        self.socket = socket_path
        self.conn = libvirt.open(name="qemu:///system?socket=%s" % (self.socket))

        self.showInformations()

    def showInformations(self):
        host_infos = self.conn.getInfo()

        log("----- LIBVIRT INFOS -----")
        log("Model:                %s" % (host_infos[0]))
        log("Memory size:          %s MB" % (host_infos[1]))
        log("Number of CPUs:       %s" % (host_infos[2]))
        log("MHz of CPUs:          %s" % (host_infos[3]))
        log("NUMA nodes:           %s" % (host_infos[4]))
        log("CPU sockets:          %s" % (host_infos[5]))
        log("CPU cores per socket: %s" % (host_infos[6]))
        log("CPU threads per core: %s" % (host_infos[7]))

    def getDomain(self, domainid):
        try:
            dom = self.conn.lookupByName(domainid)

        except libvirt.libvirtError:
            dom = None

        return dom

    # pylint: disable=no-self-use
    def getId(self, dom):
        # return domain id
        return dom.UUIDString()

    # pylint: disable=no-self-use
    def getName(self, dom):
        # return domain name
        return dom.name()

    def getIPAddress(self, dom, timeout=None):
        # return domain main IP address

        guest_agent = xml.etree.ElementTree.fromstring(dom.XMLDesc()).find(
            ".//channel/target[@name='org.qemu.guest_agent.0']"
        )

        if guest_agent is None:
            return self.getIPAddressFromDhcpLease(dom, timeout=timeout)

        return self.getIPAddressFromGuestAgent(dom, timeout=timeout)

    def getIPAddressFromDhcpLease(self, dom, timeout=None):
        # return domain main IP address

        net_infos = self.getNetworkInfos(dom)
        started_at = float(time.time())

        for network in self.conn.listAllNetworks():
            if not hasattr(network, "bridgeName") or network.bridgeName() != net_infos.get("iface"):
                continue

            while timeout is None or time.time() < started_at + timeout:
                leases = network.DHCPLeases()
                for lease in sorted(leases, key=lambda item: item.get("expirytime"), reverse=True):
                    if lease.get("mac") != net_infos.get("mac"):
                        continue

                    if timeout is not None:
                        log(
                            "found domain IP address after %.2f seconds"
                            % (time.time() - started_at)
                        )

                    return lease.get("ipaddr")

                # no timeout set, return after first attempt
                if timeout is None:
                    return None

                # wait for 200ms before re-trying
                time.sleep(0.2)

        return None

    def getIPAddressFromGuestAgent(self, dom, timeout=None):
        # return domain main IP address

        net_infos = self.getNetworkInfos(dom)
        started_at = float(time.time())

        while timeout is None or time.time() < started_at + timeout:
            try:
                iface_addresses = dom.interfaceAddresses(
                    libvirt.VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT
                )
            except libvirt.libvirtError:
                iface_addresses = {}

            for iface, data in iface_addresses.items():
                if data.get("hwaddr") != net_infos.get("mac"):
                    continue

                for addr in data.get("addrs"):
                    if addr.get("type") != libvirt.VIR_IP_ADDR_TYPE_IPV4:
                        continue

                    if timeout is not None:
                        log(
                            "found domain IP address after %.2f seconds on guest's %s"
                            % (time.time() - started_at, iface)
                        )

                    return addr.get("addr")

            # no timeout set, return after first attempt
            if timeout is None:
                return None

            # wait for 200ms before re-trying
            time.sleep(0.2)

        return None

    def getNetworkInfos(self, dom):
        # return first network name

        xml_root = xml.etree.ElementTree.fromstring(dom.XMLDesc())
        xml_iface_src = xml_root.find(".//interface/source")
        xml_iface_mac = xml_root.find(".//interface/mac")

        if xml_iface_src is None or xml_iface_mac is None or xml_iface_src.get("bridge") is None:
            return dict()

        mac_addr = xml_iface_mac.get("address")
        bridge_iface = xml_iface_src.get("bridge")

        return {"mac": mac_addr, "iface": bridge_iface}

    def getNetworkMac(self, dom):
        return self.getNetworkInfos(dom).get("mac")

    def getNetworkIface(self, dom):
        return self.getNetworkInfos(dom).get("iface")

    def getLabels(self, dom):
        try:
            xml_labels = dom.metadata(
                type=libvirt.VIR_DOMAIN_METADATA_ELEMENT,
                uri="http://github.com/lionelnicolas/dalidock",
                flags=2,
            )
        except libvirt.libvirtError:
            return dict()

        return dict(xml.etree.ElementTree.fromstring(xml_labels).items())

    def getLabel(self, dom, name, default=False):
        labels = self.getLabels(dom)

        if name not in labels:
            return default

        return labels[name]


class LibvirtEventsHandler:
    def __init__(self, dns_entries, lb_entries, config_lock):
        # note: event loop need to be registered before opening connection to libvirt
        libvirt.virEventRegisterDefaultImpl()

        # register error handler
        libvirt.registerErrorHandler(self.errorCallback, None)

        if not os.path.exists(LIBVIRT_SOCKET):
            self.libvirt = None
            return

        self.libvirt = LibvirtQemuClient(LIBVIRT_SOCKET)
        self.dns = dns_entries
        self.lb = lb_entries
        self.config_lock = config_lock
        self.event_loop_thread = None
        self.loop = True

    def run(self):
        if self.libvirt is None:
            log("Skipping libvirt events handler as %s not found" % (LIBVIRT_SOCKET))
            return

        log("Starting libvirt events handler")

        self.eventLoopStart()
        self.libvirt.conn.domainEventRegister(self.eventCallback, None)

        # get all other running containers, then fix/update their network configuration if needed
        self.loadAllDomains()

    def eventLoopRun(self):
        while self.loop:
            libvirt.virEventRunDefaultImpl()

    def eventLoopStart(self):
        self.event_loop_thread = threading.Thread(target=self.eventLoopRun, name="libvirtEventLoop")

        self.event_loop_thread.setDaemon(True)
        self.event_loop_thread.start()

    def eventCallback(self, _conn, dom, event, detail, _opaque):
        log(
            "libvirt event: domain %s(%s) got %s (%s)"
            % (dom.name(), dom.ID(), DOM_EVENTS[event], DOM_EVENTS[event][detail])
        )

        if str(DOM_EVENTS[event]) in ["Started", "Stopped"]:
            self.handleDomainSafe(dom, str(DOM_EVENTS[event]))

        # if definition is updated while domain is running, emulate 'Started' event
        elif str(DOM_EVENTS[event]) == "Defined" and dom.state()[0] == libvirt.VIR_DOMAIN_RUNNING:
            self.handleDomainSafe(dom, "Started")

    # pylint: disable=no-self-use
    def errorCallback(self, _, cb_error):
        # ignore empty metadata errors
        # pylint: disable=bad-continuation
        if (
            cb_error[0] == libvirt.VIR_ERR_NO_DOMAIN_METADATA
            and cb_error[1] == libvirt.VIR_FROM_DOMAIN
        ):
            return

        # ignore invalid operation errors (caused when trying to get IP on domain shutdown)
        # pylint: disable=bad-continuation
        if (
            cb_error[0] == libvirt.VIR_ERR_OPERATION_INVALID
            and cb_error[1] == libvirt.VIR_FROM_QEMU
        ):
            return

        # ignore qemu agent errors
        # pylint: disable=bad-continuation
        if (
            cb_error[0] == libvirt.VIR_ERR_AGENT_UNRESPONSIVE
            and cb_error[1] == libvirt.VIR_FROM_QEMU
        ):
            return

        log("libvirt error: [%d, %d] %s" % (cb_error[0], cb_error[1], cb_error[2]))

    def loadAllDomains(self):
        for dom in self.libvirt.conn.listAllDomains():
            if dom.state()[0] != libvirt.VIR_DOMAIN_RUNNING:
                continue

            self.handleDomainSafe(dom, "Started")

    def handleDomainSafe(self, dom, event, start_thread=True):
        # re-call in background thread
        if start_thread:
            threading.Thread(
                target=self.handleDomainSafe,
                args=(dom, event),
                kwargs={"start_thread": False},
                daemon=True,
            ).start()
            return

        # if domain has just been started, wait for IP address to be known before trying to lock
        # config for update (other newly started container/domain may already be ready)
        if event == "Started":
            log("wait for domain %s DHCP lease to appear" % (self.libvirt.getName(dom)))
            _ = self.libvirt.getIPAddress(dom, timeout=LIBVIRT_IP_TIMEOUT)

        with self.config_lock:
            self.handleDomain(dom, event)

    def handleDomain(self, dom, event):
        cid = "libvirt-qemu-%s" % (self.libvirt.getId(dom))
        name = self.libvirt.getName(dom)
        hostname = name
        ipaddress = self.libvirt.getIPAddress(dom)
        network = self.libvirt.getNetworkIface(dom)
        dns_domain = self.libvirt.getLabel(dom, "dns.domain", DNS_DOMAIN)
        dns_use_wildcard = self.libvirt.getLabel(dom, "dns.wildcard", DNS_WILDCARD).lower()
        dns_aliases = self.libvirt.getLabel(dom, "dns.aliases", "")
        lb_domain = self.libvirt.getLabel(dom, "lb.domain", LB_DOMAIN)
        lb_http_map = self.libvirt.getLabel(dom, "lb.http", "")
        lb_tcp_map = self.libvirt.getLabel(dom, "lb.tcp", "")

        # pylint: disable=simplifiable-if-statement
        if dns_use_wildcard in ["1", "true", "yes"]:
            dns_use_wildcard = True
        else:
            dns_use_wildcard = False

        log(
            "name=%-10s hostname=%-10s ip=%-15s net=%-10s domain=%-10s use_wildcard=%s"
            % (name, hostname, ipaddress, network, dns_domain, dns_use_wildcard)
        )

        if event == "Started":
            if ipaddress is None:
                log("Skipping domain %s as no IP address have been detected" % (name))
                return

            self.dns.add(
                cid, hostname, ipaddress, network, dns_domain, name, dns_aliases, dns_use_wildcard
            )
            self.lb.add(cid, hostname, ipaddress, lb_domain, lb_http_map, lb_tcp_map)

        elif event == "Stopped":
            self.dns.remove(cid)
            self.lb.remove(cid)

        self.lb.update()
        self.dns.update()

        self.dns.show()

    def stop(self):
        if self.libvirt is None:
            return

        log("Stopping libvirt event handler")
        self.loop = False


class DockerClient:
    def __init__(self, url="unix://var/run/docker.sock"):
        self.url = url
        self.conn = docker.Client(base_url=self.url)
        self.cache = dict()

        self.showInformations()

    def showInformations(self):
        docker_infos = self.conn.info()
        docker_version = self.conn.version()

        log("Kernel:           %s" % (docker_infos["KernelVersion"]))
        log("Operating System: %s" % (docker_infos["OperatingSystem"]))
        log("Docker Version:   %s" % (docker_version["Version"]))
        log("API Version:      %s\n" % (docker_version["ApiVersion"]))

    def getContainerData(self, containerid):
        # read data from cache if found
        if containerid in self.cache:
            return self.cache[containerid]

        try:
            data = self.conn.inspect_container(containerid)
        except docker.errors.NotFound:
            error("Container '%s' does not exists" % (containerid))
            data = False
        except docker.errors.APIError as e:
            error("API error while getting information: %s" % (str(e)))
            data = False

        # save data to cache
        if data:
            self.cache[containerid] = data

        return data

    # pylint: disable=no-self-use
    def getId(self, data):
        # return container id
        return data["Id"]

    # pylint: disable=no-self-use
    def getName(self, data):
        # return container name
        return data["Name"].replace("/", "")

    # pylint: disable=no-self-use
    def getHostname(self, data):
        # return container hostname
        return data["Config"]["Hostname"]

    # pylint: disable=no-self-use
    def getIPAddress(self, data):
        # return container main IP address

        for net in data["NetworkSettings"]["Networks"]:
            if net == "host":
                return get_own_ip_address()

            return data["NetworkSettings"]["Networks"][net]["IPAddress"]

    # pylint: disable=no-self-use
    def getNetworkName(self, data):
        # return first network name

        for net in data["NetworkSettings"]["Networks"]:
            return net

        return False

    # pylint: disable=no-self-use
    def getLabels(self, data):
        # return container's labels
        return data["Config"]["Labels"]

    def getLabel(self, data, name, default=False):
        # return container's label 'name'

        labels = self.getLabels(data)

        if name not in labels:
            return default

        return labels[name]


class DockerEventsHandler:
    def __init__(self, dns_entries, lb_entries, config_lock):
        self.docker = DockerClient(DOCKER_SOCKET)
        self.myid = self.getMyCid()
        self.dns = dns_entries
        self.lb = lb_entries
        self.config_lock = config_lock
        self.loop = True

    def serve(self):
        log("Starting docker events handler")

        # register current dalidock container (which will be used later by loadbalancer)
        self.registerDalidockContainer()

        # get all other running containers, then fix/update their network configuration if needed
        self.loadAllContainers()

        # listenning events
        events_generator = self.docker.conn.events(decode=False)

        while self.loop:
            evts = next(events_generator)

            for evt in evts.decode("utf8").split("\n"):
                if not evt:
                    # We've got an empty string
                    continue

                self.processEvt(evt)

    def getMyCid(self):
        myid = False
        myip = get_own_ip_address()

        for container in self.docker.conn.containers():
            data = self.docker.getContainerData(container["Id"])
            ipaddress = self.docker.getIPAddress(data)
            hostname = self.docker.getHostname(data)

            if myip != ipaddress:
                continue

            if hostname != socket.gethostname():
                continue

            myid = container["Id"]

        if not myid:
            fatal("failed to get dalidock container ID (this should not happen, this is a bug)")

        log("dalidock container ID is %s" % (myid))

        return myid

    def registerDalidockContainer(self):
        myid = False
        myip = get_own_ip_address()

        for container in self.docker.conn.containers():
            data = self.docker.getContainerData(container["Id"])
            ipaddress = self.docker.getIPAddress(data)
            hostname = self.docker.getHostname(data)

            if myip != ipaddress:
                continue

            if hostname != socket.gethostname():
                continue

            myid = container["Id"]

        if not myid:
            fatal("failed to get dalidock container ID (this should not happen, this is a bug)")

        log("registering dalidock container in DNS")

        self.handleContainerSafe(myid, "start")

    def loadAllContainers(self):
        for container in self.docker.conn.containers():
            self.handleContainerSafe(container["Id"], "start")

    def processEvt(self, evt):
        evt = json.loads(evt)

        if "Type" not in evt.keys() or evt["Type"] != "container":
            # this event is useless because not related to container state
            return

        containerid = evt["id"]
        status = evt["status"]

        if status not in ["start", "die"]:
            # These events can be dropped as we are not handling them
            return

        self.handleContainerSafe(containerid, status)

    def handleContainerSafe(self, containerid, status):
        with self.config_lock:
            self.handleContainer(containerid, status)

    def handleContainer(self, containerid, status):
        data = self.docker.getContainerData(containerid)

        if not data:
            error("Fail to fetch description of container '%s'" % (containerid))
            return

        cid = self.docker.getId(data)
        name = self.docker.getName(data)
        hostname = self.docker.getHostname(data)
        ipaddress = self.docker.getIPAddress(data)
        network = self.docker.getNetworkName(data)
        dns_domain = self.docker.getLabel(data, "dns.domain", DNS_DOMAIN)
        dns_use_wildcard = self.docker.getLabel(data, "dns.wildcard", DNS_WILDCARD).lower()
        dns_aliases = self.docker.getLabel(data, "dns.aliases", "")
        lb_domain = self.docker.getLabel(data, "lb.domain", LB_DOMAIN)
        lb_http_map = self.docker.getLabel(data, "lb.http", "")
        lb_tcp_map = self.docker.getLabel(data, "lb.tcp", "")

        # pylint: disable=simplifiable-if-statement
        if dns_use_wildcard in ["1", "true", "yes"]:
            dns_use_wildcard = True
        else:
            dns_use_wildcard = False

        log(
            "name=%-10s hostname=%-10s ip=%-15s net=%-10s domain=%-10s use_wildcard=%s"
            % (name, hostname, ipaddress, network, dns_domain, dns_use_wildcard)
        )

        if status == "start":
            self.dns.add(
                cid, hostname, ipaddress, network, dns_domain, name, dns_aliases, dns_use_wildcard
            )
            self.lb.add(cid, hostname, ipaddress, lb_domain, lb_http_map, lb_tcp_map)

        elif status == "die":
            self.dns.remove(cid)
            self.lb.remove(cid)

            # remove container data from cache
            if containerid in self.docker.cache:
                del self.docker.cache[containerid]

        self.lb.update()
        self.dns.update()

        self.dns.show()


class DnsEntries:
    def __init__(self):
        self.myid = None
        self.entries = dict()
        self.cached_etc_hosts = ""
        self.cached_wildcards = ""

    def setMyId(self, myid):
        self.myid = myid

    def add(self, cid, hostname, ipaddress, network, domain, name, aliases, use_wildcard):
        entry = {
            "hostname": hostname,
            "ipaddress": ipaddress,
            "network": network,
            "domain": domain,
            "name": name,
            "aliases": [name],
            "use_wildcard": use_wildcard,
            "count": 1,
        }

        for alias in aliases.split(","):
            if not alias:
                # empty string
                continue

            entry["aliases"].append(alias)

        self.entries[cid] = entry

    def add_lb(self, http_host, ipaddress, domain, use_wildcard):
        fake_cid = "%s_%s" % (self.myid, http_host)

        if fake_cid in self.entries:
            entry = self.entries[fake_cid]
        else:
            entry = {
                "hostname": http_host,
                "ipaddress": ipaddress,
                "network": None,
                "domain": domain,
                "name": http_host,
                "aliases": [http_host],
                "use_wildcard": use_wildcard,
                "count": 0,
            }

        entry["count"] += 1
        self.entries[fake_cid] = entry

    def remove(self, cid):
        if cid in self.entries:
            del self.entries[cid]

    def remove_lb(self, http_host):
        fake_cid = "%s_%s" % (self.myid, http_host)

        if fake_cid in self.entries:
            self.entries[fake_cid]["count"] -= 1

            if self.entries[fake_cid]["count"] <= 0:
                del self.entries[fake_cid]

    def flush_lb(self):
        fake_cid_prefix = "%s_" % (self.myid)
        ids = list(self.entries.keys())

        for entry in ids:
            if entry.startswith(fake_cid_prefix):
                del self.entries[entry]

    def show(self):
        format_str = "%-20s  %-20s  %-15s  %-10s  %-20s  %-8s  %s"

        log("")
        log(format_str % ("Name", "Hostname", "IP address", "Network", "Domain", "Wildcard", "Aliases"))

        for _, entry in self.entries.items():
            log(format_str % (
                entry.get("name"),
                entry.get("hostname"),
                entry.get("ipaddress"),
                entry.get("network"),
                entry.get("domain"),
                entry.get("use_wildcard"),
                ",".join(entry.get("aliases")),
            ))

        log("")

    def generate(self):
        etc_hosts = ""
        wildcards = ""

        for entry in self.entries:
            data = self.entries[entry]
            etc_hosts += "%-15s" % (data["ipaddress"])
            hosts = list()

            # put FQDN on top to make dnsmasq properly handle reverse DNS
            hosts.append("%s.%s" % (data["hostname"], data["domain"]))

            # loop on host names
            # pylint: disable=bad-continuation
            for host in [
                "%s" % (data["hostname"]),
                "%s.%s" % (data["name"], data["domain"]),
                "%s" % (data["name"]),
            ]:
                if host not in hosts:
                    hosts.append(host)

            # loop on aliases
            for alias in data["aliases"]:
                # strip starting dots or wildcards
                for prefix in ["*.", ".", "*"]:
                    alias = alias[alias.startswith(prefix) and len(prefix) :]

                # avoid duplication of domain name, like 'alias.domain.domain'
                if alias.endswith(data["domain"]):
                    alias = alias[: -len(data["domain"]) - 1]

                if alias not in hosts:
                    hosts.append("%s" % (alias))
                    hosts.append("%s.%s" % (alias, data["domain"]))

            # append generated line
            for host in hosts:
                etc_hosts += " %s" % (host)

            # add wildcard configuration if needed
            if data["use_wildcard"]:
                for host in hosts:
                    wildcards += "address=/%s/%s\n" % (host, data["ipaddress"])

            # end of host defintion
            etc_hosts += "\n"

        return etc_hosts, wildcards

    def update(self):
        new_etc_hosts, new_wildcards = self.generate()

        if self.cached_etc_hosts != new_etc_hosts:
            log("Hosts entries have changed, write/reload configuration")

            self.cached_etc_hosts = new_etc_hosts

            with open(DNSMASQ_HOSTS_FILE, "w") as fd:
                fd.write(self.cached_etc_hosts)

            self.reload()

        if self.cached_wildcards != new_wildcards:
            log("Wildcards entries have changed, write/reload configuration")

            self.cached_wildcards = new_wildcards

            with open(DNSMASQ_WILDCARDS_FILE, "w") as fd:
                fd.write(self.cached_wildcards)

            self.restart()

    # pylint: disable=no-self-use
    def reload(self):
        os.system("sv hup dnsmasq")

    # pylint: disable=no-self-use
    def restart(self):
        os.system("sv restart dnsmasq")


class LoadbalancerEntries:
    def __init__(self, dns):
        self.dns = dns
        self.entries = dict()
        self.myip = get_own_ip_address(from_env=True)
        self.cached_haproxy_config = ""

    def add(self, cid, hostname, ipaddress, domain, http_map, tcp_map):
        entry = {
            "hostname": hostname,
            "ipaddress": ipaddress,
            "domain": domain,
            "http_entries": list(),
            "tcp_entries": list(),
        }

        for http_entry in http_map.split(","):
            if not http_entry:
                # empty string
                continue

            entry["http_entries"].append(http_entry)

        for tcp_entry in tcp_map.split(","):
            if not tcp_entry:
                # empty string
                continue

            entry["tcp_entries"].append(tcp_entry)

        self.entries[cid] = entry

    def remove(self, cid):
        if cid in self.entries:
            del self.entries[cid]

    def show(self):
        print(json.dumps(self.entries, indent=4, sort_keys=True))

    def generate(self):
        http_conf = dict()
        tcp_conf = dict()
        haproxy_config = ""
        haproxy_http_frontends = ""
        haproxy_http_backends = ""
        haproxy_tcp_frontends = ""
        haproxy_tcp_backends = ""

        with open(HAPROXY_CONFIG_TEMPLATE, "r") as fd:
            haproxy_config = fd.read()

        self.dns.flush_lb()

        for entry in self.entries:
            data = self.entries[entry]

            for http_entry in data["http_entries"]:
                http_host, http_port = http_entry.split(":")
                wildcard = False

                if http_host.startswith("*."):
                    http_host = http_host[2:]
                    wildcard = True

                if http_host not in http_conf:
                    http_conf[http_host] = dict()
                    http_conf[http_host]["wildcard"] = wildcard
                    http_conf[http_host]["domain"] = data["domain"]
                    http_conf[http_host]["servers"] = list()

                http_conf[http_host]["servers"].append(
                    {"name": data["hostname"], "ipaddress": data["ipaddress"], "port": http_port}
                )

            for tcp_entry in data["tcp_entries"]:
                if tcp_entry.count(":") == 1:
                    tcp_host, tcp_port = tcp_entry.split(":")
                    tcp_backend_port = tcp_port
                elif tcp_entry.count(":") == 2:
                    tcp_host, tcp_port, tcp_backend_port = tcp_entry.split(":")
                else:
                    log("Skipping invalid TCP entry %s" % (tcp_entry))

                wildcard = False

                if tcp_host.startswith("*."):
                    tcp_host = tcp_host[2:]
                    wildcard = True

                if tcp_port not in tcp_conf:
                    tcp_conf[tcp_port] = dict()
                    tcp_conf[tcp_port]["wildcard"] = wildcard
                    tcp_conf[tcp_port]["tcp_host"] = tcp_host
                    tcp_conf[tcp_port]["domain"] = data["domain"]
                    tcp_conf[tcp_port]["servers"] = list()

                tcp_conf[tcp_port]["servers"].append(
                    {
                        "name": data["hostname"],
                        "ipaddress": data["ipaddress"],
                        "port": tcp_backend_port,
                    }
                )

        for http_host in http_conf:
            haproxy_http_frontends += "\t# handle %s\n" % (http_host)
            haproxy_http_frontends += "\tacl is_%s hdr_reg(host) ^(.*\\.|)%s(\\..+$|$)\n" % (
                http_host,
                http_host,
            )
            haproxy_http_frontends += "\tuse_backend backend_http_%s if is_%s\n" % (
                http_host,
                http_host,
            )
            haproxy_http_frontends += "\n"

            haproxy_http_backends += "backend backend_http_%s\n" % (http_host)
            for server in http_conf[http_host]["servers"]:
                haproxy_http_backends += "\tserver %s %s:%s check port %s\n" % (
                    server["name"],
                    server["ipaddress"],
                    server["port"],
                    server["port"],
                )
            haproxy_http_backends += "\n"

            self.dns.add_lb(
                http_host,
                self.myip,
                http_conf[http_host]["domain"],
                http_conf[http_host]["wildcard"],
            )

        for tcp_port in tcp_conf:
            haproxy_tcp_frontends += "frontend frontend_tcp_%s_%s\n" % (
                tcp_conf[tcp_port]["tcp_host"],
                tcp_port,
            )
            haproxy_tcp_frontends += "\tbind *:%s\n" % (tcp_port)
            haproxy_tcp_frontends += "\tmode tcp\n"
            haproxy_tcp_frontends += "\toption tcplog\n"
            haproxy_tcp_frontends += "\tuse_backend backend_tcp_%s_%s\n" % (
                tcp_conf[tcp_port]["tcp_host"],
                tcp_port,
            )
            haproxy_tcp_frontends += "\n"

            haproxy_tcp_backends += "backend backend_tcp_%s_%s\n" % (
                tcp_conf[tcp_port]["tcp_host"],
                tcp_port,
            )
            haproxy_tcp_backends += "\tmode tcp\n"
            haproxy_tcp_backends += "\tbalance roundrobin\n"
            for server in tcp_conf[tcp_port]["servers"]:
                haproxy_tcp_backends += "\tserver %s %s:%s check port %s\n" % (
                    server["name"],
                    server["ipaddress"],
                    server["port"],
                    server["port"],
                )
            haproxy_tcp_backends += "\n"

            self.dns.add_lb(
                tcp_conf[tcp_port]["tcp_host"],
                self.myip,
                tcp_conf[tcp_port]["domain"],
                tcp_conf[tcp_port]["wildcard"],
            )

        haproxy_config += haproxy_http_frontends
        haproxy_config += haproxy_http_backends

        haproxy_config += haproxy_tcp_frontends
        haproxy_config += haproxy_tcp_backends

        return haproxy_config

    def update(self):
        new_haproxy_config = self.generate()

        if self.cached_haproxy_config != new_haproxy_config:
            log("HAproxy configuration has changed, write/reload configuration")

            self.cached_haproxy_config = new_haproxy_config

            with open(HAPROXY_CONFIG_FILE, "w") as fd:
                fd.write(self.cached_haproxy_config)

            self.restart()

    # pylint: disable=no-self-use
    def restart(self):
        os.system("haproxy-start %s" % (HAPROXY_CONFIG_FILE))


signal.signal(signal.SIGINT, sighandler)
signal.signal(signal.SIGTERM, sighandler)


def main():
    # prepare data models
    config_lock = threading.Lock()
    dns_entries = DnsEntries()
    lb_entries = LoadbalancerEntries(dns_entries)

    # prepare event handlers
    libvirt_evt_handler = LibvirtEventsHandler(dns_entries, lb_entries, config_lock)
    docker_evt_handler = DockerEventsHandler(dns_entries, lb_entries, config_lock)

    # update myid attribute (gotten from docker client)
    dns_entries.setMyId(docker_evt_handler.myid)

    # start event handlers
    libvirt_evt_handler.run()
    docker_evt_handler.serve()

    # stop libvirt handler
    libvirt_evt_handler.stop()


if __name__ == "__main__":
    main()

#!/bin/sh

# source environment variables
. /etc/default-environment

# wait for dnsmasq to be running
while ! pidof dnsmasq >/dev/null 2>&1; do
	echo "waiting for dnsmasq to be up ..."
	sleep .5
done

# generate resolv.conf file
# if NetworkManager's resolv.conf is mapped, use its nameservers, or use
# the docker-provided ones instead

resolvconf_file=${DNSMASQ_DATADIR}/resolv.conf.generated

if [ -f /run/NetworkManager/resolv.conf -a -n "$(grep nameserver /run/NetworkManager/resolv.conf 2>/dev/null)" ]; then
	grep "^nameserver\|^search" /run/NetworkManager/resolv.conf >${resolvconf_file}
elif [ -n "${UPSTREAM_NAMESERVER:-}" ]; then
	printf "nameserver ${UPSTREAM_NAMESERVER}\n" >${resolvconf_file}
else
	grep "^nameserver\|^search" /etc/resolv.conf >${resolvconf_file}
fi

echo "generated ${resolvconf_file}"

# create /run/NetworkManager directory to monitor it
while [ "$(inotifywait --quiet --recursive --exclude '/run/NetworkManager/(system-connections|devices|no-stub-resolv.conf)' --event MOVED_TO --format '%f' /run/NetworkManager)" != "resolv.conf" ]; do
	# moved file is not resolv.conf, stay in loop
	continue
done

# this command will return on resolv.conf changes by NetworkManager, so
# this runit service script will be executed again (and dnsmasq will
# reload upstream nameservers if configuration has changed, as we are
# not using the '--no-poll' dnsmasq option)
echo "/run/NetworkManager/resolv.conf changes detected, refreshing DNS servers"

#!/bin/sh

# source environment variables
. /etc/default-environment

# wait for dnsmasq to be running
while ! pidof dnsmasq >/dev/null 2>&1; do
	echo "waiting for dnsmasq to be up ..."
	sleep .5
done

# generate resolv.conf file
# if NetworkManager's resolv.conf is mapped, use its nameservers, or use
# the docker-provided ones instead

resolvconf_file=${DNSMASQ_DATADIR}/resolv.conf.generated

if [ -f /run/NetworkManager/resolv.conf ]; then
	grep "^nameserver\|^search" /run/NetworkManager/resolv.conf >${resolvconf_file}
elif [ -n "${UPSTREAM_NAMESERVER:-}" ]; then
	printf "nameserver ${UPSTREAM_NAMESERVER}\n" >${resolvconf_file}
elif [ -f ${DNSMASQ_DATADIR}/resolv.conf.generated ]; then
	echo "${resolvconf_file} has already been generated from /etc/resolv.conf"
else
	grep "^nameserver\|^search" /etc/resolv.conf >${resolvconf_file}
fi

echo "generated ${resolvconf_file}"

# if /run/NetworkManager/resolv.conf is not mapped, sleep forever to
# avoid inotifywait complains
if [ ! -f /run/NetworkManager/resolv.conf ]; then
	echo "NetworkManager's resolv.conf is not mapped, sleep forever"
	exec sleep INFINITY
fi

# this command will return on resolv.conf changes by NetworkManager, so
# this runit service script will be executed again (and dnsmasq will
# reload upstream nameservers if configuration has changed, as we are
# not using the '--no-poll' dnsmasq option)
exec inotifywait \
	--event close_write \
	--event move \
	/run/NetworkManager/resolv.conf \
	2>&1
